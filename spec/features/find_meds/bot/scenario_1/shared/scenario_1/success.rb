# frozen_string_literal: true

RSpec.shared_context 'FindMeds Scenario 1 Success' do
  let(:search_medicine_button_message) { build :telegram_message, text: '–ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤' }
  let(:yes_button_message) { build :telegram_message, text: '–î–∞' }
  let(:bot_helped_me_button_message) { build :telegram_message, text: '–ë–æ—Ç –º–Ω–µ –ø–æ–º–æ–≥!' }

  def push_search_medicine_button
    stub = send_message_stub_request body: {
      chat_id: chat.telegram_chat_id,
      text: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ'
    }

    bot_run :find_meds, bot_record: bot_record, message: search_medicine_button_message, chat: chat,
message_object: message_object

    expect(stub).to have_been_requested
  end

  def type_existing_medicine(medicine: nil, companies: nil)
    medicine ||= '–§–∏–Ω–ª–µ–ø—Å–∏–Ω –†–µ—Ç–∞—Ä–¥'
    medicine_button_message = build(:telegram_message, text: medicine)
    companies ||= ['NOVARTIS FARMA, S.p.A.', '–ú–û–°–ö–û–í–°–ö–ò–ô –≠–ù–î–û–ö–†–ò–ù–ù–´–ô –ó–ê–í–û–î, –§–ì–£–ü']

    find_meds_airtable_stub_request table: :drugs
    find_meds_airtable_stub_request table: :medicines
    find_meds_airtable_stub_request table: :companies
    find_meds_airtable_stub_request table: :companies, id: 'receQeH2nuPmxUA7P'
    find_meds_airtable_stub_request table: :companies, id: 'receQeH2nuPmxUA7L'

    stub = send_message_stub_request body: {
      chat_id: chat.telegram_chat_id,
      text: '–ú—ã –Ω–∞—à–ª–∏ –ª–µ–∫–∞—Ä–∞—Å—Ç–≤–æ. –õ–µ–∫–∞—Ä—Å—Ç–≤–æ–º –∫–∞–∫–æ–π —Ñ–∏—Ä–º—ã –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å?',
      reply_markup: reply_markup(
        companies,
        ['–í –Ω–∞—á–∞–ª–æ', '–ù—É–∂–Ω–æ–π —Ñ–∏—Ä–º—ã –Ω–µ—Ç']
      )
    }

    bot_run :find_meds, bot_record: bot_record, message: medicine_button_message, chat: chat,
message_object: message_object

    expect(stub).to have_been_requested
  end

  def type_existing_company(company: nil, forms: nil)
    company ||= 'NOVARTIS FARMA, S.p.A.'
    company_button_message = build(:telegram_message, text: company)

    forms ||= ['–¢–∞–±.–ø—Ä–æ–ª–æ–Ω–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è']

    stub = send_message_stub_request body: {
      chat_id: chat.telegram_chat_id,
      text: '–ö–∞–∫–æ–π –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–æ–π –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å?',
      reply_markup: reply_markup(
        forms,
        ['–í –Ω–∞—á–∞–ª–æ', '–ù—É–∂–Ω–æ–π —Ñ–æ—Ä–º—ã –Ω–µ—Ç']
      )
    }

    bot_run :find_meds, bot_record: bot_record, message: company_button_message, chat: chat,
message_object: message_object

    expect(stub).to have_been_requested
  end

  def type_existing_form(form: nil, component: nil, concentrations: nil)
    form ||= '–¢–∞–±.–ø—Ä–æ–ª–æ–Ω–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è'
    form_button_message = build(:telegram_message, text: form)

    component ||= 'carbamazepine'

    concentrations ||= ['400 –º–≥', '100 –º–≥']

    find_meds_airtable_stub_request table: :concentrations
    find_meds_airtable_stub_request table: :components

    stub = send_message_stub_request body: {
      chat_id: chat.telegram_chat_id,
      text: "–ö–∞–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ #{component} –≤–∞–º –Ω—É–∂–Ω–∞?",
      reply_markup: reply_markup(
        *concentrations,
        ['–í –Ω–∞—á–∞–ª–æ', '–ù—É–∂–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç']
      )
    }

    bot_run :find_meds, bot_record: bot_record, message: form_button_message, chat: chat, message_object: message_object

    expect(stub).to have_been_requested
  end

  def type_existing_concentration(concentration: nil, medicine: nil)
    concentration ||= '400 –º–≥'
    concentration_button_message = build(:telegram_message, text: concentration)

    medicine ||= '–§–∏–Ω–ª–µ–ø—Å–∏–Ω –†–µ—Ç–∞—Ä–¥ "Teva Pharmaceutical Industries, Ltd." carbamazepine  –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è 400 –º–≥'

    stub = send_message_stub_request body: {
      chat_id: chat.telegram_chat_id,
      text: "–≠—Ç–æ —Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ? #{medicine}",
      reply_markup: reply_markup(%w[–î–∞ –ù–µ—Ç])
    }

    bot_run :find_meds, bot_record: bot_record, message: concentration_button_message, chat: chat,
message_object: message_object

    expect(stub).to have_been_requested
  end

  def push_yes_button_on_reinforcement(medicines: nil)
    medicines ||= ['–§–∏–Ω–ª–µ–ø—Å–∏–Ω –†–µ—Ç–∞—Ä–¥ "Teva Pharmaceutical Industries, Ltd." carbamazepine  –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è 400 –º–≥']
    list = medicines.map do |medicine|
      "üîµ #{medicine}"
    end.join("\n")
    text = "–ú—ã –Ω–∞—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å –≤–∞—à–∏–º –ø–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º—É –≤–µ—â–µ—Å—Ç–≤—É, —Ñ–æ—Ä–º–µ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏\n#{list}"
    stub = send_message_stub_request body: {
      chat_id: chat.telegram_chat_id,
      text: text,
      reply_markup: reply_markup(
        ['–ë–æ—Ç –º–Ω–µ –ø–æ–º–æ–≥!'], ['–≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —è –Ω–∞–¥–µ—è–ª—Å—è_–∞—Å—å (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤)']
      )
    }

    bot_run :find_meds, bot_record: bot_record, message: yes_button_message, chat: chat, message_object: message_object

    expect(stub).to have_been_requested
  end

  def push_bot_helped_me_on_last_step
    stub = send_message_stub_request body: {
      chat_id: chat.telegram_chat_id,
      text: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å!',
      reply_markup: reply_markup(['–í –Ω–∞—á–∞–ª–æ'])
    }

    bot_run :find_meds, bot_record: bot_record, message: bot_helped_me_button_message, chat: chat,
message_object: message_object

    expect(stub).to have_been_requested
  end
end
